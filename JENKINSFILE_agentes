pipeline {
    agent none
    stages {
        stage('Get Code') {
            agent { label 'Agent-1' }
            steps {
                git 'https://github.com/FoxMateo/Caso-practico-1b.git'
                stash name: 'source-code', includes: '**'
                sh 'ls -la'
                sh 'whoami && hostname && echo ${WORKSPACE}'
            }
        }

        stage('Tests and Analysis') {
            parallel {
                stage('Unit Tests') {
                    agent { label 'Agent-2' }
                    steps {
                        unstash 'source-code'
                        sh '''
                            export PYTHONPATH=.
                            pytest --junitxml=result-unit.xml test/unit
                        '''
                        junit 'result*.xml'
                        sh 'whoami && hostname && echo ${WORKSPACE}'
                    }
                }
                stage('Static Analysis') {
                    agent { label 'Agent-1' }
                    steps {
                        unstash 'source-code'
                        sh '''
                            flake8 --exit-zero --format=pylint app >flake8.out
                        '''
                        recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], 
                            qualityGates: [[threshold: 10, type: 'TOTAL', unstable: true], [threshold: 11, type: 'TOTAL', unstable: false]]
                        sh 'whoami && hostname && echo ${WORKSPACE}'
                    }
                }
                stage('Security Tests') {
                    agent { label 'Agent-3' }
                    steps {
                        unstash 'source-code'
                        sh '''
                            bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: {test_id} {msg}"
                        '''
                        recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')],
                            qualityGates: [[threshold: 4, type: 'TOTAL', unstable: true], [threshold: 8, type: 'TOTAL', unstable: false]]
                        sh 'whoami && hostname && echo ${WORKSPACE}'
                    }
                }
            }
        }

        stage('Coverage') {
            agent { label 'Agent-2' }
            steps {
                unstash 'source-code'
                sh '''
                    coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest test/unit
                    coverage xml
                '''
                cobertura coberturaReportFile: 'coverage.xml'
                sh 'whoami && hostname && echo ${WORKSPACE}'
            }
        }

        stage('Performance Tests') {
            agent { label 'Agent-3' }
            steps {
                unstash 'source-code'
                sh '''
                    /home/oscar/cursos/devops-cloud/apache-jmeter-5.6.3/bin/jmeter.sh -n -t /home/oscar/cursos/devops-cloud/apache-jmeter-5.6.3/bin/testplan.jmx -f -l flask.jtl
                '''
                perfReport sourceDataFiles: 'flask.jtl'
                sh 'whoami && hostname && echo ${WORKSPACE}'
            }
        }
    }
}
